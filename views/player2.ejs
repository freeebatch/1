<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="icon" type="image/jpeg" href="https://i.imgur.com/Z52wJgg.jpg">
    <link rel="stylesheet" href="https://cdn.plyr.io/3.6.12/plyr.css" />
    <link href="https://fonts.googleapis.com/css?family=Poppins|Quattrocento+Sans" rel="stylesheet" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
    <title>PKV VIDEO PLAYER 2</title>
    <style>
        html {
            font-family: Poppins;
            background: #0A0909;
            margin: 0;
            padding: 0;
            --plyr-color-main: #1ac266;
        }

        .logo-container {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 60px;
            height: 60px;
        }

        .plyr {
            height: 100%;
            width: 100%;
        }

        #logo {
            position: fixed;
            background-image: url("https://i.imgur.com/Z52wJgg.jpg");
            background-size: contain;
            background-position: center;
        }

        .float {
            height: 60px;
            width: 60px;
            z-index: 10;
            border-radius: 50px;
            box-shadow: 2px 2px 3px #999;
        }

        .label-container {
            position: relative;
            top: 5px;
            left: 70px;
            display: table;
            visibility: hidden;
        }

        .label-text {
            color: #FFF;
            background: rgba(51, 51, 51, 0.5);
            display: table-cell;
            vertical-align: middle;
            padding: 10px;
            border-radius: 3px;
        }

        .label-arrow {
            display: table-cell;
            vertical-align: middle;
            color: #333;
            opacity: 0.5;
            transform: scaleX(-1);
        }

        a.float+div.label-container {
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity 0.5s ease;
        }

        a.float:hover+div.label-container {
            visibility: visible;
            opacity: 1;
        }

        .loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000;
            z-index: 9999;
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .circle {
            width: 20px;
            height: 20px;
            margin: 10px;
            border-radius: 50%;
            animation: loader-animation 0.75s ease infinite;
        }

        .circle:nth-child(1) {
            background-color: #D90429;
            animation-delay: 0s;
        }

        .circle:nth-child(2) {
            background-color: #FFA300;
            animation-delay: 0.15s;
        }

        .circle:nth-child(3) {
            background-color: #048BA8;
            animation-delay: 0.3s;
        }

        @keyframes loader-animation {
            0% {
                transform: scale(0);
                opacity: 0.7;
            }

            100% {
                transform: scale(1);
                opacity: 0;
            }
        }

        #player.plyr__video-embed {
            height: 100vh;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: auto;
        }
    </style>
</head>

<body>
    <div id="loading" class="loading">
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
    </div>

    <% if (videoUrl) { %>
        <% const parts=videoUrl.split('/'); const
            videoId=parts[parts.length - 2]; %>

        <div class="plyr__video-embed" id="player" style="margin: auto;">
            <video controls crossorigin playsinline id="videoContainer" style="background-color: #0A0909;">
                <source id="source720"
                    src="https://studywithme.onrender.com/hls?v=<%= videoId %>&quality=720"
                    type="application/x-mpegURL">
                <source id="source480"
                    src="https://studywithme.onrender.com/hls?v=<%= videoId %>&quality=480"
                    type="application/x-mpegURL">
                <source id="source360"
                    src="https://studywithme.onrender.com/hls?v=<%= videoId %>&quality=360"
                    type="application/x-mpegURL">
            </video>
        </div>
    <% } %>


    <script src="https://cdn.plyr.io/3.6.12/plyr.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const video = document.getElementById("videoContainer");
            const loadingElement = document.getElementById("loading");

            const defaultOptions = {
                controls: ['rewind', 'play', 'fast-forward', 'progress', 'current-time', 'mute', 'volume', 'settings', 'fullscreen', 'keyboard'],
                autoplay: false,
                muted: false,
                loop: { active: false },
                speed: { selected: 1, options: [1, 1.25, 1.5, 2, 2.5, 3, 3.25, 3.5, 4] },
                captions: { active: true, update: true },
                tooltips: { controls: true, seek: true },
                quality: {
                    default: 720,
                    options: [720, 480, 360],
                    forced: true,
                    onChange: (newQuality) => {
                        switch (newQuality) {
                            case 720:
                                loadVideo('source720');
                                break;
                            case 480:
                                loadVideo('source480');
                                break;
                            case 360:
                                loadVideo('source360');
                                break;
                        }
                    }
                }
            };
            const loadVideo = (sourceId) => {
                const source = document.getElementById(sourceId).src;
                console.log(source);


                if (Hls.isSupported()) {
                    const hls = new Hls();
                    // hls.loadSource(video.querySelector("source").src);
                    hls.loadSource(source);
                    hls.attachMedia(video);
                    hls.on(Hls.Events.MANIFEST_PARSED, function () {
                        loadingElement.style.display = "none";
                        video.play();
                    });

                    hls.on(Hls.Events.LEVEL_LOADED, function (event, data) {
                        // const source = document.getElementById(sourceId).src;
                        const availableQualities = hls.levels.map(l => l.height);
                        const player = new Plyr(video, defaultOptions);
                        window.player = player;
                    });
                } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                    video.src = video.querySelector("source").src;
                    video.addEventListener('canplay', () => {
                        loadingElement.style.display = "none";
                        video.play();
                    });
                    const player = new Plyr(video, defaultOptions);
                    window.player = player;
                }
            }
            loadVideo('source720');
        });
    </script>
</body>

</html>